package main.submodules.viewAnalytical
{
	import fl.controls.DataGrid;
	
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.text.TextField;
	import flash.text.TextFormat;
	import flash.utils.Dictionary;
	
	import main.submodules.control.DataList;
	import main.submodules.tools.LoadObj;
	import main.submodules.viewAnalytical.AnalyticalClass.*;
	import main.submodules.viewAnalytical.vo.buttonVo;
	import main.submodules.viewAnalytical.vo.checkBoxVo;
	import main.submodules.viewAnalytical.vo.labelVo;
	import main.submodules.viewAnalytical.vo.layerVo;
	import main.submodules.viewAnalytical.vo.resourcesVo;
	import main.submodules.viewAnalytical.vo.tableVo;
	import main.submodules.viewAnalytical.vo.textFieldVo;
	import main.view.windows.tools.CommonButton;
	import main.view.windows.tools.CommonCheckBox;
	import main.view.windows.tools.CommonTextArea;
	import main.view.windows.tools.CommonTextField;
	import main.view.windows.tools.XmlUtil;
	
	import org.puremvc.as3.patterns.facade.Facade;

	public class viewAnalytical
	{
		private var urlList:Array=[];//地址列表
		private var parentList:Array=[];//显示容器
		private var objList:Array=[];//参数列表
		
		private var btnVo:Dictionary=new Dictionary();
		private var layer:Object={};
		private var _load:LoadObj=new LoadObj();
		private var loadingUrl:String="";//冒泡加载
		private var viewArr:Array=[];
		private var scrollList:Array=[];
		
		private var analyticalDict:Dictionary=new Dictionary();
		public function viewAnalytical()
		{
			addAnalyticalClass("button",AnalyticalButton);
			addAnalyticalClass("textField",AnalyticalTextField);
			addAnalyticalClass("label",AnalyticalLabel);
			addAnalyticalClass("resources",AnalyticalResources);
			addAnalyticalClass("checkBox",AnalyticalCheckBox);
			addAnalyticalClass("table",AnalyticalTable);
			addAnalyticalClass("layer",AnalyticalLayer);
		}
		public function addAnalyticalClass(item:String,cl:Class):void{
			analyticalDict[item]=new cl();
		}
		public function removeAnalyticalClass(item:String):void{
			delete analyticalDict[item];
		}
		/**
		 * 
		 * @param url 配置文件路径
		 * @param parentObj 显示容器
		 * 
		 */		
		public function init(url:String,parentObj:Object,_view:Dictionary=null,_obj:Object=null):void{
			if(!url.substring(url.length-4)==".xml"){
				trace("XML地址错误！");
				return;
			}
			if(!parentObj){
				trace("显示容器不能为空！");
				return;
			}
			urlList.push(url);
			parentList.push(parentObj);
			viewArr.push(_view);
			objList.push(_obj);
			if(loadingUrl.length>0){
				return;
			}
			loading();
		}
		private function loading():void{
			if(urlList.length>0){
				_load.load(urlList[0],{onComplete:loaded});
				loadingUrl=urlList[0];
			}
		}
		private function loaded(e:*):void{
			analytical(new XML(e),parentList[0],viewArr[0],objList[0]);
			if(objList[0]&&objList[0]["onComplete"]){
				objList[0]["onComplete"]();
				Facade.getInstance().sendNotification("analyticalEnd",null,loadingUrl);
			}
			loadingUrl="";
			urlList.shift();
			parentList.shift();
			viewArr.shift();
			objList.shift();
			loading();
		}
		/**
		 *解析配置文件 
		 * @param xml XML数据源
		 * @param _parent 显示窗口
		 * @param view 所有显示对象索引容器
		 * 
		 */		
		public function analytical(xml:XML,_parent:Object=null,view:Dictionary=null,_obj:Object=null):void{
			for each(var ixml:XML in xml.children())
			{
				if(!ixml)return;
				var a:IAnalytical=analyticalDict[ixml.name().toString()];
				if(a){
					a.analytical(ixml,_parent,view,_obj);
				}
			}
		}
		public static function addDisplay(key:String,obj:Object,view:Dictionary=null):void{
			if(!view)return;
			if(!view[key]){
				view[key]=[];
			}
			view[key].push(obj);
		}
	}
}